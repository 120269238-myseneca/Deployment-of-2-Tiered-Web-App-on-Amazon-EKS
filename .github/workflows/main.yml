name: Deploy to ECR
on:
  workflow_dispatch:
    inputs:
      approver:
        description: 'ECR Deployment Approver'
        required: true
        default: '120269238-myseneca'

jobs:
  confirm:
    runs-on: ubuntu-latest
    outputs:
      is_approved: ${{ steps.check_approval.outputs.approved }}
    steps:
      - name: Check Approver
        id: check_approval
        run: |
          if [ "${{ github.event.inputs.approver }}" == "120269238-myseneca" ]; then
            echo "Deployment approved by ${{ github.event.inputs.approver }}"
            echo "approved=true" >> $GITHUB_OUTPUT
          else
            echo "Deployment not approved by ${{ github.event.inputs.approver }}"
            echo "approved=false" >> $GITHUB_OUTPUT
          fi

  terraform_ecr:
    name: Terraform ECR
    needs: confirm
    if: needs.confirm.outputs.is_approved == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Login to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2


      - name: Build and Push Application IMAGE TO ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: docker-assignment
          IMAGE_TAG: v0.1
          APPLICATION_ECR_PREFIX: app-image
        run: |
          cd web_application/
          docker build -t $ECR_REGISTRY/${APPLICATION_ECR_PREFIX}-$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/${APPLICATION_ECR_PREFIX}-$ECR_REPOSITORY:$IMAGE_TAG


      - name: Build and Push DATABASE IMAGE TO ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: docker-assignment
          IMAGE_TAG: v0.1
          DATABASE_ECR_PREFIX: database-image
        run: |
          cd web_application/
          docker build -t $ECR_REGISTRY/${DATABASE_ECR_PREFIX}-$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile_mysql .
          docker push $ECR_REGISTRY/${DATABASE_ECR_PREFIX}-$ECR_REPOSITORY:$IMAGE_TAG
